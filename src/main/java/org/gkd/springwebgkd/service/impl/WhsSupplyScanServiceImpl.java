/*
 * Created on 23 Des 2015 ( Time 11:11:56 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.gkd.springwebgkd.service.impl;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.gkd.springwebgkd.bean.WhsSupplyScan;
import org.gkd.springwebgkd.bean.jpa.WhsSupplyScanEntity;
import org.gkd.springwebgkd.repo.WhsSupplyScanRepository;
import org.gkd.springwebgkd.service.WhsSupplyScanService;
import org.gkd.springwebgkd.service.mapper.WhsSupplyScanServiceMapper;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of WhsSupplyScanService
 */
@Component
@Transactional
public class WhsSupplyScanServiceImpl implements WhsSupplyScanService {

	@Resource
	private WhsSupplyScanRepository whsSupplyScanRepository;
	
	@Resource
	private WhsSupplyScanServiceMapper whsSupplyScanServiceMapper;
	
	
	@Override
	public WhsSupplyScan findById(BigDecimal kdTrx) {
		WhsSupplyScanEntity entity = whsSupplyScanRepository.load(kdTrx);
		return whsSupplyScanServiceMapper.mapWhsSupplyScanEntityToWhsSupplyScan(entity);
	}

	@Override
	public List<WhsSupplyScan> findAll() {
		List<WhsSupplyScanEntity> entities = whsSupplyScanRepository.loadAll();
		List<WhsSupplyScan> beans = new ArrayList<WhsSupplyScan>();
		for(WhsSupplyScanEntity entity : entities) {
			beans.add(whsSupplyScanServiceMapper.mapWhsSupplyScanEntityToWhsSupplyScan(entity));
		}
		return beans;
	}

	@Override
	public WhsSupplyScan save(WhsSupplyScan whsSupplyScan) {
		return update(whsSupplyScan) ;
	}

	@Override
	public WhsSupplyScan create(WhsSupplyScan whsSupplyScan) {
		if(whsSupplyScanRepository.load(whsSupplyScan.getKdTrx()) != null) {
			throw new IllegalStateException("already.exists");
		}
		WhsSupplyScanEntity whsSupplyScanEntity = new WhsSupplyScanEntity();
		whsSupplyScanServiceMapper.mapWhsSupplyScanToWhsSupplyScanEntity(whsSupplyScan, whsSupplyScanEntity);
		WhsSupplyScanEntity whsSupplyScanEntitySaved = whsSupplyScanRepository.save(whsSupplyScanEntity);
		return whsSupplyScanServiceMapper.mapWhsSupplyScanEntityToWhsSupplyScan(whsSupplyScanEntitySaved);
	}

	@Override
	public WhsSupplyScan update(WhsSupplyScan whsSupplyScan) {
		WhsSupplyScanEntity whsSupplyScanEntity = whsSupplyScanRepository.load(whsSupplyScan.getKdTrx());
		whsSupplyScanServiceMapper.mapWhsSupplyScanToWhsSupplyScanEntity(whsSupplyScan, whsSupplyScanEntity);
		WhsSupplyScanEntity whsSupplyScanEntitySaved = whsSupplyScanRepository.save(whsSupplyScanEntity);
		return whsSupplyScanServiceMapper.mapWhsSupplyScanEntityToWhsSupplyScan(whsSupplyScanEntitySaved);
	}

	@Override
	public void delete(WhsSupplyScan whsSupplyScan, BigDecimal kdTrx) {
		WhsSupplyScanEntity whsSupplyScanEntity = whsSupplyScanRepository.load(whsSupplyScan.getKdTrx());
		whsSupplyScanServiceMapper.mapWhsSupplyScanToWhsSupplyScanEntity(whsSupplyScan, whsSupplyScanEntity);
		whsSupplyScanRepository.delete(whsSupplyScanEntity, kdTrx);
	}


	public WhsSupplyScanServiceMapper getWhsSupplyScanServiceMapper() {
		return whsSupplyScanServiceMapper;
	}

	public void setWhsSupplyScanServiceMapper(WhsSupplyScanServiceMapper whsSupplyScanServiceMapper) {
		this.whsSupplyScanServiceMapper = whsSupplyScanServiceMapper;
	}

	public WhsSupplyScanRepository getWhsSupplyScanRepository() {
		return whsSupplyScanRepository;
	}

	public void setWhsSupplyScanRepository(WhsSupplyScanRepository whsSupplyScanRepository) {
		this.whsSupplyScanRepository = whsSupplyScanRepository;
	}

	@Override
	public BigDecimal getMaxId() {
		return whsSupplyScanRepository.findMaxKdTrx();
	}

	@Override
	public String openPeriodeLpb() {
		return whsSupplyScanRepository.openPeriodeLpb();
	}
	
	@Override
	public String openPeriodeBpb() {
		return whsSupplyScanRepository.openPeriodeBpb();
	}

	@Override
	public List<WhsSupplyScan> findListSupplyHarian(String kdGudang) {
		List<WhsSupplyScanEntity> entities = whsSupplyScanRepository.findListSupplyHarian(kdGudang);
		List<WhsSupplyScan> beans = new ArrayList<WhsSupplyScan>();
		for(WhsSupplyScanEntity entity : entities) {
			beans.add(whsSupplyScanServiceMapper.mapWhsSupplyScanEntityToWhsSupplyScan(entity));
		}
		return beans;
	}

	@Override
	public List<WhsSupplyScan> search(Map<String, Object> params, int maxResult) {
		List<WhsSupplyScanEntity> entities = whsSupplyScanRepository.search(params, "tanggalTrx desc",maxResult);
		List<WhsSupplyScan> beans = new ArrayList<WhsSupplyScan>();
		for(WhsSupplyScanEntity entity : entities) {
			beans.add(whsSupplyScanServiceMapper.mapWhsSupplyScanEntityToWhsSupplyScan(entity));
		}
		return beans;
	}

	@Override
	public BigDecimal findQtySupply(String noBarcode, String bulan, String tahun) {
		return whsSupplyScanRepository.findQtySupply(noBarcode, bulan, tahun);
	}

	@Override
	public BigDecimal getKdTrxBefore(String noBarcode, String kdGudang) {
		return whsSupplyScanRepository.getKdTrxBefore(noBarcode, kdGudang);
	}

	@Override
	public List findItemScan(String bulan, String tahun, String kdGudang) {
		return whsSupplyScanRepository.findItemScan(bulan, tahun, kdGudang);
	}

}
