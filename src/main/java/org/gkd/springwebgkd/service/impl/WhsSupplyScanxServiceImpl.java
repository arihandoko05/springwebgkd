/*
 * Created on 23 Des 2015 ( Time 11:11:56 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.gkd.springwebgkd.service.impl;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.gkd.springwebgkd.bean.WhsSupplyScanx;
import org.gkd.springwebgkd.bean.jpa.WhsSupplyScanxEntity;
import org.gkd.springwebgkd.repo.WhsSupplyScanxRepository;
import org.gkd.springwebgkd.service.WhsSupplyScanxService;
import org.gkd.springwebgkd.service.mapper.WhsSupplyScanxServiceMapper;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of WhsSupplyScanService
 */
@Component
@Transactional
public class WhsSupplyScanxServiceImpl implements WhsSupplyScanxService {

	@Resource
	private WhsSupplyScanxRepository whsSupplyScanxRepository;
	
	@Resource
	private WhsSupplyScanxServiceMapper whsSupplyScanxServiceMapper;
	
	
	@Override
	public WhsSupplyScanx findById(BigDecimal kdTrx) {
		WhsSupplyScanxEntity entity = whsSupplyScanxRepository.load(kdTrx);
		return whsSupplyScanxServiceMapper.mapWhsSupplyScanxEntityToWhsSupplyScan(entity);
	}

	@Override
	public List<WhsSupplyScanx> findAll() {
		List<WhsSupplyScanxEntity> entities = whsSupplyScanxRepository.loadAll();
		List<WhsSupplyScanx> beans = new ArrayList<WhsSupplyScanx>();
		for(WhsSupplyScanxEntity entity : entities) {
			beans.add(whsSupplyScanxServiceMapper.mapWhsSupplyScanxEntityToWhsSupplyScan(entity));
		}
		return beans;
	}

	@Override
	public WhsSupplyScanx save(WhsSupplyScanx whsSupplyScan) {
		return update(whsSupplyScan) ;
	}

	@Override
	public WhsSupplyScanx create(WhsSupplyScanx whsSupplyScan) {
		if(whsSupplyScanxRepository.load(whsSupplyScan.getKdTrx()) != null) {
			throw new IllegalStateException("already.exists");
		}
		WhsSupplyScanxEntity whsSupplyScanEntity = new WhsSupplyScanxEntity();
		whsSupplyScanxServiceMapper.mapWhsSupplyScanToWhsSupplyScanxEntity(whsSupplyScan, whsSupplyScanEntity);
		WhsSupplyScanxEntity whsSupplyScanEntitySaved = whsSupplyScanxRepository.save(whsSupplyScanEntity);
		return whsSupplyScanxServiceMapper.mapWhsSupplyScanxEntityToWhsSupplyScan(whsSupplyScanEntitySaved);
	}

	@Override
	public WhsSupplyScanx update(WhsSupplyScanx whsSupplyScan) {
		WhsSupplyScanxEntity whsSupplyScanEntity = whsSupplyScanxRepository.load(whsSupplyScan.getKdTrx());
		whsSupplyScanxServiceMapper.mapWhsSupplyScanToWhsSupplyScanxEntity(whsSupplyScan, whsSupplyScanEntity);
		WhsSupplyScanxEntity whsSupplyScanEntitySaved = whsSupplyScanxRepository.save(whsSupplyScanEntity);
		return whsSupplyScanxServiceMapper.mapWhsSupplyScanxEntityToWhsSupplyScan(whsSupplyScanEntitySaved);
	}

	@Override
	public void delete(WhsSupplyScanx whsSupplyScan, BigDecimal kdTrx) {
		WhsSupplyScanxEntity whsSupplyScanEntity = whsSupplyScanxRepository.load(whsSupplyScan.getKdTrx());
		whsSupplyScanxServiceMapper.mapWhsSupplyScanToWhsSupplyScanxEntity(whsSupplyScan, whsSupplyScanEntity);
		whsSupplyScanxRepository.delete(whsSupplyScanEntity, kdTrx);
	}


	@Override
	public BigDecimal getMaxId() {
		return whsSupplyScanxRepository.findMaxKdTrx();
	}

	@Override
	public String openPeriodeBpb() {
		return whsSupplyScanxRepository.openPeriodeBpb();
	}

	@Override
	public List<WhsSupplyScanx> findListSupplyHarian(String kdGudang) {
		List<WhsSupplyScanxEntity> entities = whsSupplyScanxRepository.findListSupplyHarian(kdGudang);
		List<WhsSupplyScanx> beans = new ArrayList<WhsSupplyScanx>();
		for(WhsSupplyScanxEntity entity : entities) {
			beans.add(whsSupplyScanxServiceMapper.mapWhsSupplyScanxEntityToWhsSupplyScan(entity));
		}
		return beans;
	}

	@Override
	public List<WhsSupplyScanx> search(Map<String, Object> params, int maxResult) {
		List<WhsSupplyScanxEntity> entities = whsSupplyScanxRepository.search(params, "tanggalTrx desc",maxResult);
		List<WhsSupplyScanx> beans = new ArrayList<WhsSupplyScanx>();
		for(WhsSupplyScanxEntity entity : entities) {
			beans.add(whsSupplyScanxServiceMapper.mapWhsSupplyScanxEntityToWhsSupplyScan(entity));
		}
		return beans;
	}

	public WhsSupplyScanxRepository getWhsSupplyScanxRepository() {
		return whsSupplyScanxRepository;
	}

	public void setWhsSupplyScanxRepository(WhsSupplyScanxRepository whsSupplyScanxRepository) {
		this.whsSupplyScanxRepository = whsSupplyScanxRepository;
	}

	public WhsSupplyScanxServiceMapper getWhsSupplyScanxServiceMapper() {
		return whsSupplyScanxServiceMapper;
	}

	public void setWhsSupplyScanxServiceMapper(WhsSupplyScanxServiceMapper whsSupplyScanxServiceMapper) {
		this.whsSupplyScanxServiceMapper = whsSupplyScanxServiceMapper;
	}

}
