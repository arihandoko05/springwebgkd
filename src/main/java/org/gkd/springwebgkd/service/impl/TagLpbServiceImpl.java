/*
 * Created on 23 Des 2015 ( Time 11:11:56 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.gkd.springwebgkd.service.impl;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;

import org.gkd.springwebgkd.bean.TagLpb;
import org.gkd.springwebgkd.bean.jpa.TagLpbEntity;
import org.gkd.springwebgkd.repo.TagLpbRepository;
import org.gkd.springwebgkd.service.TagLpbService;
import org.gkd.springwebgkd.service.mapper.TagLpbServiceMapper;
import org.springframework.stereotype.Component;

/**
 * Implementation of WhsSupplyScanService
 */
@Component
public class TagLpbServiceImpl implements TagLpbService {

	@Resource
	private TagLpbRepository tagLpbRepository;
	
	@Resource
	private TagLpbServiceMapper tagLpbServiceMapper;
	
	
	@Override
	public TagLpb findById(String kdTrx) {
		TagLpbEntity entity = tagLpbRepository.load(kdTrx);
		return tagLpbServiceMapper.mapTagLpbEntityToTagLpb(entity);
	}

	@Override
	public List<TagLpb> findAll() {
		List<TagLpbEntity> entities = tagLpbRepository.loadAll();
		List<TagLpb> beans = new ArrayList<TagLpb>();
		for(TagLpbEntity entity : entities) {
			beans.add(tagLpbServiceMapper.mapTagLpbEntityToTagLpb(entity));
		}
		return beans;
	}

	@Override
	public TagLpb save(TagLpb tagLpb) {
		return update(tagLpb) ;
	}

	@Override
	public TagLpb create(TagLpb tagLpb) {
		if(tagLpbRepository.load(tagLpb.getNoReg()) != null) {
			throw new IllegalStateException("already.exists");
		}
		TagLpbEntity tagLpbEntity = new TagLpbEntity();
		tagLpbServiceMapper.mapTagLpbToTagLpbEntity(tagLpb, tagLpbEntity);
		TagLpbEntity whsSupplyScanEntitySaved = tagLpbRepository.save(tagLpbEntity);
		return tagLpbServiceMapper.mapTagLpbEntityToTagLpb(whsSupplyScanEntitySaved);
	}

	@Override
	public TagLpb update(TagLpb tagLpb) {
		TagLpbEntity tagLpbEntity = tagLpbRepository.load(tagLpb.getNoReg());
		tagLpbServiceMapper.mapTagLpbToTagLpbEntity(tagLpb, tagLpbEntity);
		TagLpbEntity whsSupplyScanEntitySaved = tagLpbRepository.save(tagLpbEntity);
		return tagLpbServiceMapper.mapTagLpbEntityToTagLpb(whsSupplyScanEntitySaved);
	}

	@Override
	public void delete(TagLpb tagLpb, String kdTrx) {
		TagLpbEntity tagLpbEntity = tagLpbRepository.load(tagLpb.getNoReg());
		tagLpbServiceMapper.mapTagLpbToTagLpbEntity(tagLpb, tagLpbEntity);
		tagLpbRepository.delete(tagLpbEntity, kdTrx);
	}

	public TagLpbRepository getTagLpbRepository() {
		return tagLpbRepository;
	}

	public void setTagLpbRepository(TagLpbRepository tagLpbRepository) {
		this.tagLpbRepository = tagLpbRepository;
	}

	public TagLpbServiceMapper getTagLpbServiceMapper() {
		return tagLpbServiceMapper;
	}

	public void setTagLpbServiceMapper(TagLpbServiceMapper tagLpbServiceMapper) {
		this.tagLpbServiceMapper = tagLpbServiceMapper;
	}

	@Override
	public Date openPeriodeDt() {
		return tagLpbRepository.openPeriodeLpbDt();
	}

	@Override
	public BigDecimal getQtyMutasiTag(String tahun, String bulan, String kdSite, String noBarcode) {
		return tagLpbRepository.getQtyMutasiTag(tahun, bulan, kdSite, noBarcode);
	}

	@Override
	public Date openPeriodeStoDt() {
		return tagLpbRepository.openPeriodeStoDt();
	}

	@Override
	public Date openPeriodeBpb() {
		return tagLpbRepository.openPeriodeBpb();
	}

	@Override
	public BigDecimal getQtySupply(String noBarcode, String kdSite) {
		return tagLpbRepository.getQtySupply(noBarcode, kdSite);
	}

	@Override
	public String getNameNpk(String npk) {
		return tagLpbRepository.getNameNpk(npk);
	}

}
